////////////////The buffers//////////////////
#define N 3;

channel buffer1 N;
channel buffer2 N;
channel buffer3 N;



////////////////The messages//////////////////
var a = 1;
var b = 2;
var c = 3;

////////////////The process of each participating microservice//////////////////
PM1() = buffer2!a-> buffer1?2 -> buffer3!c-> P_1_1()[]buffer1?2->buffer2!a-> P_1_2();
P_1_1() = buffer2!a->P_1_1();
P_1_2() = buffer2!a->P_1_2();

PM2() = buffer2?1 -> buffer1!b-> P_2_1() [] buffer1!b->buffer2?1-> P_2_2();
P_2_1() = buffer2?1 ->P_2_1();
P_2_2() = buffer2?1 ->P_2_2();


PM3() = buffer3?3->  P_3();
P_3() = e-> P_3();

////////////////The process of a asynchronous interaction behavior of a microservice system //////////////////
System() = PM1() ||| PM2() ||| PM3();


////////////////The interaction soundeness//////////////////
#define buf12 call(cempty,buffer2) == true;
#define buf13 call(cempty,buffer3) == true;
#define buf21 call(cempty,buffer1) == true;


#assert System()|= []("init" -> <> ("terminate" && buf12 && buf13 && buf21));
#assert System() deadlockfree;
//#assert System()|= []("init" -> <> ("terminate"));